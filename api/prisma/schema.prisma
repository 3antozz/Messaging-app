// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  password        String
  first_name      String
  last_name       String
  picture_url     String?
  friends         Friendship[]     @relation("friendship")
  friends2        Friendship[]     @relation("friendship2")
  bio             String?
  conversations   Conversation[]
  messages        Message[]
  joinDate        DateTime         @default(now())
  groups_created  Conversation[]   @relation("groupAdmin")
}

model Conversation {
  id                Int         @id @default(autoincrement())
  participants      User[]
  messages          Message[]
  creationDate      DateTime    @default(now())
  isGroup           Boolean     @default(false)
  admin             User?       @relation("groupAdmin", fields: [adminId], references: [id])
  adminId           Int?
  group_name        String?
  picture_url       String?
  friendship        Friendship?
  lastMessageTime   DateTime?
}

model Friendship {
  user1             User              @relation(name: "friendship", fields: [user1Id], references: [id])
  user1Id           Int
  user2             User              @relation(name: "friendship2", fields: [user2Id], references: [id])
  user2Id           Int
  conversation      Conversation      @relation(fields: [conversationId], references: [id])       
  conversationId    Int               @unique   

  @@unique([user1Id, user2Id])        
}

model Message {
  id              Int             @id @default(autoincrement())
  sender          User            @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId        Int
  conversation    Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversationId  Int
  content         String?
  picture_url     String?
  date            DateTime        @default(now())
}
